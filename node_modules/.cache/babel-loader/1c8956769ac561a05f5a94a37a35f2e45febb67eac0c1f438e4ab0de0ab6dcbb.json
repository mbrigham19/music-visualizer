{"ast":null,"code":"var _jsxFileName = \"/Users/molly.brigham/Downloads/projects/music-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport UploadUI from './components/UploadUI';\nimport LyricDisplay from './components/LyricDisplay';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [lyrics, setLyrics] = useState('');\n  const fetchLyrics = async (song, artist) => {\n    try {\n      const response = await axios.get('api/lyrics', {\n        params: {\n          song,\n          artist\n        }\n      });\n      setLyrics(response.data.lyrics);\n    } catch (error) {\n      console.error('Error fetching lyrics', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UploadUI, {\n      fetchLyrics: fetchLyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LyricDisplay, {\n      lyrics: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ZyLHx15qhgylBj47SBJBq6hPLaY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","UploadUI","LyricDisplay","axios","jsxDEV","_jsxDEV","App","_s","lyrics","setLyrics","fetchLyrics","song","artist","response","get","params","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/molly.brigham/Downloads/projects/music-visualizer/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport UploadUI from './components/UploadUI';\nimport LyricDisplay from './components/LyricDisplay';\nimport axios from 'axios';\n\nfunction App() {\n    const [lyrics, setLyrics] = useState('');\n\n    const fetchLyrics = async (song, artist) => {\n        try {\n            const response = await axios.get('api/lyrics', { \n                params: { song, artist }\n            });\n            setLyrics(response.data.lyrics);\n        } catch (error) {\n            console.error('Error fetching lyrics', error);\n        }\n    };\n\n    return (\n        <div>\n            <UploadUI fetchLyrics={fetchLyrics} />\n            <LyricDisplay lyrics={lyrics} />\n        </div>\n    )\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMU,WAAW,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,KAAK;IACxC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,YAAY,EAAE;QAC3CC,MAAM,EAAE;UAAEJ,IAAI;UAAEC;QAAO;MAC3B,CAAC,CAAC;MACFH,SAAS,CAACI,QAAQ,CAACG,IAAI,CAACR,MAAM,CAAC;IACnC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAAc,QAAA,gBACId,OAAA,CAACJ,QAAQ;MAACS,WAAW,EAAEA;IAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtClB,OAAA,CAACH,YAAY;MAACM,MAAM,EAAEA;IAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEd;AAAChB,EAAA,CApBQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAsBZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}